services:
  database:
    image: postgres:17-alpine
    container_name: database
    restart: always
    ports:
      - 5432:5432
    env_file:
      - envs/prod/.env
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 3s
      timeout: 3s
      retries: 5
  api:
    container_name: api
    restart: unless-stopped
    image: registry.digitalocean.com/meschac38000/fastapi-starter
    pull_policy: always
    healthcheck:
      test: python manage.py healthcheck
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      database:
        condition: service_healthy
        restart: true
      redis_server:
        condition: service_healthy
        restart: true
    ports:
      - "8001:8001"
    env_file:
      - envs/prod/.env
    command: ["bash", "./scripts/entrypoint.sh"]

  redis_server:
    image: meschac38000/redis-fastapi
    pull_policy: always
    container_name: redis_server
    restart: always
    env_file:
      - ./envs/dev/.env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf.example:/usr/local/etc/redis/redis.conf
    privileged: true
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "--no-auth-warning", "--pass $$REDIS_PASSWORD", "--raw ping | grep PONG" ]
      interval: 3s
      timeout: 3s
      retries: 5
    command: sh -c "./entrypoint.sh"

  celery_server:
    image: registry.digitalocean.com/meschac38000/fastapi-starter
    pull_policy: always
    container_name: celery_server
    restart: on-failure
    env_file:
      - ./envs/prod/.env
    command: bash -c "celery -A main.celery worker -n default@%h -Q default --loglevel=INFO"
    depends_on:
      api:
        condition: service_healthy
        restart: true

  celery_beat:
    image: registry.digitalocean.com/meschac38000/fastapi-starter
    pull_policy: always
    container_name: celery_beat
    restart: on-failure
    depends_on:
      api:
        condition: service_healthy
        restart: true
    env_file:
      - ./envs/prod/.env
    command: bash -c "celery -A main.celery beat --loglevel=INFO"

  celery_flower:
    container_name: flower
    restart: always
    image: mher/flower:2.0
    ports:
      - "5556:5555"
    volumes:
      - flower_data:/data
    env_file:
      - envs/prod/.env
    depends_on:
      redis_server:
        condition: service_healthy
        restart: true
    command: sh -c "celery --broker=$$CELERY_BROKER flower"
volumes:
  data: {}
  redis_data: {}
  flower_data: {}
